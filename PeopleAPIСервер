#Область СлужебныеПроцедуры

// Хранение параметров в справочнике "НастройкиИнтеграции"
// Пример структуры справочника:
// - КодАвторизации (Строка 255)
// - КлиентID (Строка 255)
// - СекретКлиента (Строка 255)            
// Вместо:
//Справочники.НастройкиИнтеграции.НайтиПоНаименованию("GoogleAPI");

//// Используйте новый справочник с расширенными реквизитами:
//Справочники.НастройкиИнтеграцииGoogle.НайтиПоНаименованию("Основные");           

Функция ПроверитьТокен()
    Если ТекущаяДата() > ПолучитьНастройки().ТокенОбновления + ПолучитьНастройки().ExpiresIn Тогда
        Возврат ОбновитьТокенДоступа();
    Иначе
        Возврат ПолучитьНастройки().AccessToken;
    КонецЕсли;
КонецФункции

Процедура ОткрытьСсылку(Ссылка)
    // Для толстого клиента
    ЗапуститьПриложение("explorer " + Ссылка); 
    // Для веб-клиента
    // ОткрытьСсылкуВБраузере(Ссылка);
КонецПроцедуры

Функция ОбменятьКодНаТокен(Код)
    Настройки = ПолучитьНастройки();
    
    Запрос = Новый HTTPЗапрос;
    Запрос.Адрес = "https://oauth2.googleapis.com/token";
    Запрос.Метод = "POST";
    Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    
    Параметры = Новый Соответствие;
    Параметры.Вставить("code", Код);
    Параметры.Вставить("client_id", Настройки.КлиентID);
    Параметры.Вставить("client_secret", Настройки.СекретКлиента);
    Параметры.Вставить("redirect_uri", "urn:ietf:wg:oauth:2.0:oob");
    Параметры.Вставить("grant_type", "authorization_code");
    
    Запрос.УстановитьТелоИзСтроки(СтрСоединитьПараметры(Параметры, "&"));
    
    Соединение = Новый HTTPСоединение("oauth2.googleapis.com", 443, , , 30, Новый ЗащищенноеСоединениеOpenSSL());
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния <> 200 Тогда
        ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
    КонецЕсли;
    
    Возврат ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
КонецФункции

Процедура ПримерПолнойИнтеграции() Экспорт
    Попытка
        // Инициализация
        Если Не Справочники.НастройкиИнтеграцииGoogle.НайтиПоНаименованию("Основные").Существует() Тогда
            Настройки = Новый Структура;
            Настройки.Вставить("КлиентID", "ваш_client_id");
            Настройки.Вставить("СекретКлиента", "ваш_client_secret");
            СохранитьНастройки(Настройки);
        КонецЕсли;
        
        // Авторизация
        URL = ПолучитьURLАвторизации();
        ОткрытьСсылку(URL);
        
        // Получение кода
        Код = ВвестиСтроку("Введите полученный код авторизации:");
        
        // Обмен кода на токены
        Токены = ОбменятьКодНаТокен(Код);
        СохранитьНастройки(Токены);
        
        // Работа с контактами
        Контакты = ПолучитьКонтакты();
        Для Каждого Контакт Из Контакты.connections Цикл
            Сообщить(Контакт.names[0].displayName);
        КонецЦикла;
        
    Исключение
        Сообщить("Ошибка интеграции: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры


Функция ОбработатьОшибкуHTTP(Ответ)
    Если Ответ = Неопределено Тогда
        Возврат "Неизвестная ошибка";
    КонецЕсли;
    
    Попытка
        ДанныеОшибки = ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
        Если ДанныеОшибки.error.Свойство("message") Тогда
            Возврат ДанныеОшибки.error.message;
        ИначеЕсли ДанныеОшибки.Свойство("error_description") Тогда
            Возврат ДанныеОшибки.error_description;
        Иначе
            Возврат Ответ.ПолучитьТелоКакСтроку();
        КонецЕсли;
    Исключение
        Возврат "HTTP ошибка: " + Ответ.КодСостояния;
    КонецПопытки;
КонецФункции


Функция СоздатьКонтакт(НовыйКонтакт) Экспорт
    Попытка
        AccessToken = ПолучитьAccessToken();
        
        Запрос = Новый HTTPЗапрос;
        Запрос.Метод = "POST";
        Запрос.Адрес = "https://people.googleapis.com/v1/people:createContact";
        Запрос.Заголовки.Вставить("Authorization", "Bearer " + AccessToken);
        Запрос.Заголовки.Вставить("Content-Type", "application/json");
        
        ПисательJSON = Новый ЗаписьJSON;
        ПисательJSON.УстановитьСтроку();
        ЗаписатьJSON(ПисательJSON, НовыйКонтакт);
        Тело = ПисательJSON.Закрыть();
        
        Запрос.УстановитьТелоИзСтроки(Тело);
        
        Соединение = Новый HTTPСоединение("people.googleapis.com", 443, , , 30, Новый ЗащищенноеСоединениеOpenSSL());
        Ответ = Соединение.Отправить(Запрос);
        
        Если Ответ.КодСостояния <> 200 Тогда
            ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
        КонецЕсли;
        
        Возврат ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
        
    Исключение
        ВызватьИсключение "Ошибка создания контакта: " + ОписаниеОшибки();
    КонецПопытки;
КонецФункции
#Область OAuth2

Функция ПолучитьAccessToken() Экспорт
    Настройки = ПолучитьНастройки();
    
    Если Настройки.AccessToken <> "" И Настройки.ТокенОбновления + Настройки.ExpiresIn > ТекущаяДата() Тогда
        Возврат Настройки.AccessToken;
    Иначе
        Возврат ОбновитьТокенДоступа();
    КонецЕсли;
КонецФункции

Функция ОбновитьТокенДоступа() Экспорт
    Настройки = ПолучитьНастройки();
    
    Запрос = Новый HTTPЗапрос;
    Запрос.Адрес = "https://oauth2.googleapis.com/token";
    Запрос.Метод = "POST";
    Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    
    Параметры = Новый Соответствие;
    Параметры.Вставить("client_id", Настройки.КлиентID);
    Параметры.Вставить("client_secret", Настройки.СекретКлиента);
    Параметры.Вставить("refresh_token", Настройки.RefreshToken);
    Параметры.Вставить("grant_type", "refresh_token");
    
    Запрос.УстановитьТелоИзСтроки(СтрСоединитьПараметры(Параметры, "&"));
    
    Соединение = Новый HTTPСоединение("oauth2.googleapis.com", 443, , , 30, Новый ЗащищенноеСоединениеOpenSSL());
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния <> 200 Тогда
        ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
    КонецЕсли;
    
    Данные = ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
    
    СохранитьНастройки(Новый Структура(
        "AccessToken, ExpiresIn, ТокенОбновления",
        Данные.access_token,
        Данные.expires_in,
        ТекущаяДата()
    ));
    
    Возврат Данные.access_token;
КонецФункции

#КонецОбласти

Процедура ЗаписатьПараметрыАвторизации(Код, КлиентID, СекретКлиента)
    Настройки = Справочники.НастройкиИнтеграцииGoogle.НайтиПоНаименованию("Основные");
    Если Настройки.Пустая() Тогда
        Настройки = Справочники.НастройкиИнтеграции.СоздатьЭлемент();
        Настройки.Наименование = "GoogleAPI";
    КонецЕсли;
    
    Настройки.КодАвторизации = Код;
    Настройки.КлиентID = КлиентID;
    Настройки.СекретКлиента = СекретКлиента;
    Настройки.Записать();
КонецПроцедуры

Функция ПолучитьПараметрыАвторизации()
    Настройки = Справочники.НастройкиИнтеграции.НайтиПоНаименованию("GoogleAPI");
    Если Настройки.Пустая() Тогда
        ВызватьИсключение "Не настроены параметры авторизации";
    КонецЕсли;
    
    Возврат Новый Структура(
        "КодАвторизации, КлиентID, СекретКлиента",
        Настройки.КодАвторизации,
        Настройки.КлиентID,
        Настройки.СекретКлиента
    );
КонецФункции

#КонецОбласти

#Область ОсновныеФункции

//Функция ПолучитьAccessToken(ТокенURL = "https://oauth2.googleapis.com/token") Экспорт
//    Попытка
//        Параметры = ПолучитьПараметрыАвторизации();
//        
//        ЗапросHTTP = Новый HTTPЗапрос;
//        ЗапросHTTP.Метод = "POST";
//        ЗапросHTTP.Адрес = ТокенURL;
//        ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
//        
//        ПараметрыЗапроса = Новый Соответствие;
//        ПараметрыЗапроса.Вставить("code", Параметры.КодАвторизации);
//        ПараметрыЗапроса.Вставить("client_id", Параметры.КлиентID);
//        ПараметрыЗапроса.Вставить("client_secret", Параметры.СекретКлиента);
//        ПараметрыЗапроса.Вставить("redirect_uri", "urn:ietf:wg:oauth:2.0:oob");
//        ПараметрыЗапроса.Вставить("grant_type", "authorization_code");
//        
//        ЗапросHTTP.УстановитьТелоИзСтроки(СтрСоединитьПараметры(ПараметрыЗапроса, "&"));
//        
//        HTTPСоединение = Новый HTTPСоединение(
//            "oauth2.googleapis.com",
//            443,
//            "", 
//            "",
//            30,
//            Новый ЗащищенноеСоединениеOpenSSL()
//        );
//        
//        Ответ = HTTPСоединение.Получить(ЗапросHTTP);
//        
//        Если Ответ.КодСостояния <> 200 Тогда
//            ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
//        КонецЕсли;
//        
//        ЧтениеJSON = Новый ЧтениеJSON;
//        ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
//        ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
//        
//        Возврат ДанныеОтвета.access_token;
//        
//    Исключение
//        Сообщить("Ошибка получения токена: " + ОписаниеОшибки());
//    КонецПопытки;
//КонецФункции

Функция ПолучитьКонтакты(AccessToken, ПерсонализированныеПоля = "names,emailAddresses,phoneNumbers") Экспорт
    Попытка
        ЗапросHTTP = Новый HTTPЗапрос;
        ЗапросHTTP.Адрес = "https://people.googleapis.com/v1/people/me/connections";
        ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + AccessToken);
        ЗапросHTTP.ПараметрыЗапроса.Вставить("personFields", ПерсонализированныеПоля);
        ЗапросHTTP.ПараметрыЗапроса.Вставить("pageSize", "2000");
        
        HTTPСоединение = Новый HTTPСоединение(
            "people.googleapis.com",
            443,
            "", 
            "",
            30,
            Новый ЗащищенноеСоединениеOpenSSL()
        );
        
        Ответ = HTTPСоединение.Получить(ЗапросHTTP);
        
        Если Ответ.КодСостояния <> 200 Тогда
            ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
        КонецЕсли;
        
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
        Возврат ПрочитатьJSON(ЧтениеJSON);
        
    Исключение
        Сообщить("Ошибка получения контактов: " + ОписаниеОшибки());
    КонецПопытки;
КонецФункции

// Добавляем процедуру для получения code
Процедура ИнициироватьАвторизацию(ClientID)  Экспорт
    RedirectURI = "http://localhost/callback"; // Ваш callback URL
    Scope = "https://www.googleapis.com/auth/contacts"; // Для работы с контактами
   
    AuthorizationURL = "https://accounts.google.com/o/oauth2/v2/auth?"
                     + "response_type=code"
                     + "&client_id=" + ClientID
                     + "&redirect_uri=" + RedirectURI
                     + "&scope=" + Scope
                     + "&state=state_parameter";
                     
    ОткрытьСсылку(AuthorizationURL);
КонецПроцедуры

// Добавляем процедуру для обработки callback
Процедура ОбработатьCallback(Запрос)
    ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
    Если ПараметрыЗапроса.Существует("code") Тогда
        КодАвторизации = ПараметрыЗапроса["code"];
        ЗаписатьПараметрыАвторизации(КодАвторизации, "", "");
        Сообщить("Код авторизации успешно получен и сохранен.");
    Иначе
        Сообщить("Ошибка: код авторизации не был передан.");
    КонецЕсли;
КонецПроцедуры

// Добавляем функцию для обмена code на access token
Функция ОбменятьCodeНаAccessToken(Code) Экспорт
    Попытка
        ЗапросHTTP = Новый HTTPЗапрос;
        ЗапросHTTP.Метод = "POST";
        ЗапросHTTP.Адрес = "https://oauth2.googleapis.com/token";
        ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
        
        Параметры = ПолучитьПараметрыАвторизации();
        
        ПараметрыЗапроса = Новый Соответствие;
        ПараметрыЗапроса.Вставить("code", Code);
        ПараметрыЗапроса.Вставить("client_id", Параметры.КлиентID);
        ПараметрыЗапроса.Вставить("client_secret", Параметры.СекретКлиента);
        ПараметрыЗапроса.Вставить("redirect_uri", "urn:ietf:wg:oauth:2.0:oob");
        ПараметрыЗапроса.Вставить("grant_type", "authorization_code");
        
        ЗапросHTTP.УстановитьТелоИзСтроки(СтрСоединитьПараметры(ПараметрыЗапроса, "&"));
        
        HTTPСоединение = Новый HTTPСоединение(
            "oauth2.googleapis.com",
            443,
            "", 
            "",
            30,
            Новый ЗащищенноеСоединениеOpenSSL()
        );
        
        Ответ = HTTPСоединение.Получить(ЗапросHTTP);
        
        Если Ответ.КодСостояния <> 200 Тогда
            ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
        КонецЕсли;
        
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
        ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
        
        Возврат ДанныеОтвета.access_token;
        
    Исключение
        Сообщить("Ошибка получения токена: " + ОписаниеОшибки());
    КонецПопытки;
КонецФункции

#КонецОбласти

#Область ПримерыИспользования

// Пример инициализации параметров
Процедура ИнициализироватьНастройки()
    КодАвторизации = "4/0Ade..."; // Получить через OAuth
    КлиентID = "ваш_client_id.apps.googleusercontent.com";
    СекретКлиента = "ваш_client_secret";
    
    ЗаписатьПараметрыАвторизации(КодАвторизации, КлиентID, СекретКлиента);
    Сообщить("Настройки успешно сохранены!");
КонецПроцедуры

// Пример получения контактов
Процедура ПримерПолученияКонтактов()
    Попытка
        AccessToken = ПолучитьAccessToken();
        ДанныеКонтактов = ПолучитьКонтакты(AccessToken);
        
        Для Каждого Контакт Из ДанныеКонтактов.connections Цикл
            Сообщить(Контакт.names[0].displayName + " - " + Контакт.emailAddresses[0].value);
        КонецЦикла;
        
    Исключение
        Сообщить("Ошибка: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры

// Пример создания контакта
Процедура ПримерСозданияКонтакта()
    Попытка
        AccessToken = ПолучитьAccessToken();
        
        НовыйКонтакт = Новый Структура;
        НовыйКонтакт.Вставить("names", Новый Массив(
            Новый Структура("displayName", "Иван Иванов")
        ));
        НовыйКонтакт.Вставить("emailAddresses", Новый Массив(
            Новый Структура("value", "ivan@example.com")
        ));
        
        Результат = СоздатьКонтакт(AccessToken, НовыйКонтакт);
        Сообщить("Создан контакт: " + Результат.resourceName);
        
    Исключение
        Сообщить("Ошибка: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры

// Пример обработки callback
Процедура ПримерОбработкиCallback(Запрос)
    ОбработатьCallback(Запрос); // Обрабатываем callback и сохраняем код авторизации
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

Функция СтрСоединитьПараметры(Параметры, Разделитель)
    Результат = "";
    Для Каждого Пара Из Параметры Цикл
        Если Результат <> "" Тогда
            Результат = Результат + Разделитель;
        КонецЕсли;
        Результат = Результат + Пара.Ключ + "=" + КодироватьСтроку(Пара.Значение, СпособКодированияСтроки.КодировкаURL);
    КонецЦикла;
    Возврат Результат;
КонецФункции

//Функция ОбработатьОшибкуHTTP(Ответ)
//    Если Ответ = Неопределено Тогда
//        Возврат "Неизвестная ошибка";
//    КонецЕсли;
//    
//    Попытка
//        ЧтениеJSON = Новый ЧтениеJSON;
//        ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
//        ДанныеОшибки = ПрочитатьJSON(ЧтениеJSON);
//        Если ДанныеОшибки.Свойство("error") Тогда
//            Возврат ДанныеОшибки.error.message;
//        КонецЕсли;
//    Исключение
//        Возврат Ответ.ПолучитьТелоКакСтроку();
//    КонецПопытки;
//    
//    Возврат "HTTP ошибка: " + Ответ.КодСостояния;
//КонецФункции

//// Определяем процедуру ОткрытьСсылку
//Процедура ОткрытьСсылку(Ссылка) Экспорт
//    // Используем команду ОС для открытия URL в браузере
//    ЗапуститьПриложение(Ссылка);
//КонецПроцедуры

//// Определяем процедуру СоздатьКонтакт
//Функция СоздатьКонтакт(AccessToken, НовыйКонтакт) Экспорт
//    Попытка
//        ЗапросHTTP = Новый HTTPЗапрос;
//        ЗапросHTTP.Адрес = "https://people.googleapis.com/v1/people/createContact";
//        ЗапросHTTP.Метод = "POST";
//        ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json");
//        ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + AccessToken);
//        
//        ЗаписьJSON = Новый ЗаписьJSON;
//        ЗаписьJSON.УстановитьСтроку(НовыйКонтакт);
//        ЗапросHTTP.УстановитьТело(ЗаписьJSON.Закрыть());
//        
//        HTTPСоединение = Новый HTTPСоединение(
//            "people.googleapis.com",
//            443,
//            "", 
//            "",
//            30,
//            Новый ЗащищенноеСоединениеOpenSSL()
//        );
//        
//        Ответ = HTTPСоединение.Получить(ЗапросHTTP);
//        
//        Если Ответ.КодСостояния <> 200 Тогда
//            ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
//        КонецЕсли;
//        
//        ЧтениеJSON = Новый ЧтениеJSON;
//        ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
//        ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
//        
//        Возврат ДанныеОтвета;
//        
//    Исключение
//        Сообщить("Ошибка создания контакта: " + ОписаниеОшибки());
//    КонецПопытки;
//КонецФункции

#КонецОбласти  

//Процедура ПримерПолнойИнтеграции() Экспорт
//    
//    // Инициализация
//    Если Не Справочники.НастройкиИнтеграцииGoogle.НайтиПоНаименованию("Основные").Существует() Тогда
//        Настройки = Новый Структура;
//        Настройки.Вставить("КлиентID", "ваш_client_id");
//        Настройки.Вставить("СекретКлиента", "ваш_client_secret");
//        СохранитьНастройки(Настройки);
//    КонецЕсли;
//    
//    // Авторизация
//    URL = ПолучитьURLАвторизации();
//    
//    // Отображение HTML-поля для авторизации
//    Форма = ПолучитьФормаHTML(URL);
//    ПоказатьФорма(Форма);
//    
//    // Ожидание ввода кода
//    Код = ЖдатьКодАвторизации();
//    
//    // Обмен кода на токен
//    Токен = ОбменятьКодНаТокен(Код);
//    
//    // Работа с контактами
//    Контакты = ПолучитьКонтакты();
//    Для Каждого Контакт Из Контакты.connections Цикл
//        Сообщить(Контакт.names[0].displayName);
//    КонецЦикла;
//    
//    // Создание нового контакта
//    НовыйКонтакт = Новый Структура;
//    НовыйКонтакт.Вставить("names", Новый Массив(
//        Новый Структура("displayName", "Тест Пользователь")
//    ));
//    НовыйКонтакт.Вставить("emailAddresses", Новый Массив(
//        Новый Структура("value", "test@example.com")
//    ));
//    Результат = СоздатьКонтакт(НовыйКонтакт);
//    Сообщить("Создан контакт: " + Результат.resourceName);
//    
//КонецПроцедуры

// Функция для получения URL авторизации
Функция ПолучитьURLАвторизации() Экспорт
    Настройки = ПолучитьНастройки();
    
    RedirectURI = "http://localhost/callback"; // Ваш callback URL
    Scope = "https://www.googleapis.com/auth/contacts"; // Для работы с контактами
    ClientID = Настройки.КлиентID;
    
    AuthorizationURL = "https://accounts.google.com/o/oauth2/v2/auth?"
                     + "response_type=code"
                     + "&client_id=" + ClientID
                     + "&redirect_uri=" + RedirectURI
                     + "&scope=" + Scope
                     + "&state=state_parameter";
                     
    Возврат AuthorizationURL;
КонецФункции

// Функция для получения формы HTML с полем для ввода кода
Функция ПолучитьФормаHTML(URL) Экспорт
    Форма = Новый Форма("ФормаАвторизации");
    Элементы = Форма.Элементы;
    
    Поля = Элементы.Добавить("ПолеHTMLДокумент");
    Поля.Ссылка = URL;
    
    Поля = Элементы.Добавить("ПолеВвода");
    Поля.Заголовок = "Введите код авторизации:";
    Поля.Ширина = 400;
    Поля.Высота = 20;
    
    Кнопка = Элементы.Добавить("Команда");
    Кнопка.Заголовок = "Продолжить";
    Кнопка.Ширина = 80;
    Кнопка.Высота = 25;
    
    Возврат Форма;
КонецФункции

// Функция для ожидания ввода кода
Функция ЖдатьКодАвторизации() Экспорт
    Пока Истина Цикл
        Код = Форма.Элементы.ПолеВвода.Значение;
        Если Код <> "" Тогда
            Прервать;
        КонецЕсли;
        Задержка(1);
    КонецЦикла;
    
    Возврат Код;
КонецФункции

// Функция для сохранения настроек
Процедура СохранитьНастройки(Настройки) Экспорт
    НастройкиGoogle = Справочники.НастройкиИнтеграцииGoogle.СоздатьЭлемент();
    НастройкиGoogle.Наименование = "Основные";
    НастройкиGoogle.КлиентID = Настройки.КлиентID;
    НастройкиGoogle.СекретКлиента = Настройки.СекретКлиента;
    НастройкиGoogle.Записать();
КонецПроцедуры

// Функция для получения настроек
Функция ПолучитьНастройки() Экспорт
    НастройкиGoogle = Справочники.НастройкиИнтеграцииGoogle.НайтиПоНаименованию("Основные");
    Если НастройкиGoogle.Пустая() Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Настройки = Новый Структура;
    Настройки.Вставить("КлиентID", НастройкиGoogle.КлиентID);
    Настройки.Вставить("СекретКлиента", НастройкиGoogle.СекретКлиента);
    
    Возврат Настройки;
КонецФункции

// Функция для показа формы
Процедура ПоказатьФорма(Форма) Экспорт
    ОткрытьФорму(Форма);
КонецПроцедуры

