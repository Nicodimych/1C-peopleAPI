
#Область Настройки

// Справочник "НастройкиИнтеграцииGoogle" должен содержать:
// - КлиентID (Строка 255)
// - СекретКлиента (Строка 255)
// - AccessToken (Строка 255)
// - RefreshToken (Строка 255)
// - ExpiresIn (Число)
// - ТокенОбновления (Дата)

Функция ПолучитьНастройки() Экспорт
    Настройки = Справочники.НастройкиИнтеграцииGoogle.НайтиПоНаименованию("Основные");
    Если Настройки.Пустая() Тогда
        ВызватьИсключение "Настройки интеграции не найдены";
    КонецЕсли;
    
    Возврат Новый Структура(
        "КлиентID, СекретКлиента, AccessToken, RefreshToken, ExpiresIn, ТокенОбновления",
        Настройки.КлиентID,
        Настройки.СекретКлиента,
        Настройки.AccessToken,
        Настройки.RefreshToken,
        Настройки.ExpiresIn,
        Настройки.ТокенОбновления
    );
КонецФункции

Процедура СохранитьНастройки(Данные) Экспорт
    Настройки = Справочники.НастройкиИнтеграцииGoogle.НайтиПоНаименованию("Основные");
    Если Настройки.Пустая() Тогда
        Настройки = Справочники.НастройкиИнтеграцииGoogle.СоздатьЭлемент();
        Настройки.Наименование = "Основные";
    КонецЕсли;
    
    Настройки.КлиентID = Данные.КлиентID;
    Настройки.СекретКлиента = Данные.СекретКлиента;
    Настройки.AccessToken = Данные.AccessToken;
    Настройки.RefreshToken = Данные.RefreshToken;
    Настройки.ExpiresIn = Данные.ExpiresIn;
    Настройки.ТокенОбновления = Данные.ТокенОбновления;
    
    Настройки.Записать();
КонецПроцедуры

#КонецОбласти

#Область OAuth

Функция ПолучитьURLАвторизации() Экспорт
    Настройки = ПолучитьНастройки();
    
    Параметры = Новый Соответствие;
    Параметры.Вставить("client_id", Настройки.КлиентID);
    Параметры.Вставить("redirect_uri", "http://localhost");
    Параметры.Вставить("scope", "https://www.googleapis.com/auth/contacts");
    Параметры.Вставить("access_type", "offline");
    Параметры.Вставить("response_type", "code");
    
    URL = "https://accounts.google.com/o/oauth2/v2/auth?";
    Для Каждого Пар Из Параметры Цикл
        URL = URL + Пар.Ключ + "=" + КодироватьСтроку(Пар.Значение, СпособКодированияСтроки.КодировкаURL) + "&";
    КонецЦикла;
    
    Возврат Лев(URL, СтрДлина(URL)-1);
КонецФункции

Функция ОбменятьКодНаТокен(Код) Экспорт
    Настройки = ПолучитьНастройки();
    
    Запрос = Новый HTTPЗапрос;
    Запрос.Метод = "POST";
    Запрос.Адрес = "https://oauth2.googleapis.com/token";
    Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    
    Параметры = Новый Соответствие;
    Параметры.Вставить("code", Код);
    Параметры.Вставить("client_id", Настройки.КлиентID);
    Параметры.Вставить("client_secret", Настройки.СекретКлиента);
    Параметры.Вставить("redirect_uri", "http://localhost");
    Параметры.Вставить("grant_type", "authorization_code");
    
    Запрос.УстановитьТелоИзСтроки(СтрСоединитьПараметры(Параметры, "&"));
    
    Соединение = Новый HTTPСоединение("oauth2.googleapis.com", 443, , , 30, Новый ЗащищенноеСоединениеOpenSSL());
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния <> 200 Тогда
        ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
    КонецЕсли;
    
    Данные = ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
    
    НовыеНастройки = Новый Структура;
    НовыеНастройки.Вставить("AccessToken", Данные.access_token);
    НовыеНастройки.Вставить("RefreshToken", Данные.refresh_token);
    НовыеНастройки.Вставить("ExpiresIn", Данные.expires_in);
    НовыеНастройки.Вставить("ТокенОбновления", ТекущаяДата());
    
    СохранитьНастройки(НовыеНастройки);
    
    Возврат Данные.access_token;
КонецФункции

Функция ОбновитьТокенДоступа() Экспорт
    Настройки = ПолучитьНастройки();
    
    Запрос = Новый HTTPЗапрос;
    Запрос.Метод = "POST";
    Запрос.Адрес = "https://oauth2.googleapis.com/token";
    Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
    
    Параметры = Новый Соответствие;
    Параметры.Вставить("client_id", Настройки.КлиентID);
    Параметры.Вставить("client_secret", Настройки.СекретКлиента);
    Параметры.Вставить("refresh_token", Настройки.RefreshToken);
    Параметры.Вставить("grant_type", "refresh_token");
    
    Запрос.УстановитьТелоИзСтроки(СтрСоединитьПараметры(Параметры, "&"));
    
    Соединение = Новый HTTPСоединение("oauth2.googleapis.com", 443, , , 30, Новый ЗащищенноеСоединениеOpenSSL());
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния <> 200 Тогда
        ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
    КонецЕсли;
    
    Данные = ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
    
    НовыеНастройки = Новый Структура;
    НовыеНастройки.Вставить("AccessToken", Данные.access_token);
    НовыеНастройки.Вставить("ExpiresIn", Данные.expires_in);
    НовыеНастройки.Вставить("ТокенОбновления", ТекущаяДата());
    
    СохранитьНастройки(НовыеНастройки);
    
    Возврат Данные.access_token;
КонецФункции

Функция ПолучитьAccessToken() Экспорт
    Настройки = ПолучитьНастройки();
    
    Если ТекущаяДата() > Настройки.ТокенОбновления + Настройки.ExpiresIn Тогда
        Возврат ОбновитьТокенДоступа();
    КонецЕсли;
    
    Возврат Настройки.AccessToken;
КонецФункции

#КонецОбласти

#Область PeopleAPI

Функция ПолучитьКонтакты(Поля = "names,emailAddresses,phoneNumbers", РазмерСтраницы = 1000) Экспорт
    Попытка
        AccessToken = ПолучитьAccessToken();
        
        Запрос = Новый HTTPЗапрос;
        Запрос.Адрес = "https://people.googleapis.com/v1/people/me/connections";
        Запрос.Заголовки.Вставить("Authorization", "Bearer " + AccessToken);
        Запрос.ПараметрыЗапроса.Вставить("personFields", Поля);
        Запрос.ПараметрыЗапроса.Вставить("pageSize", Формат(РазмерСтраницы, "ЧГ=0"));
        
        Соединение = Новый HTTPСоединение("people.googleapis.com", 443, , , 30, Новый ЗащищенноеСоединениеOpenSSL());
        Ответ = Соединение.Получить(Запрос);
        
        Если Ответ.КодСостояния <> 200 Тогда
            ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
        КонецЕсли;
        
        Возврат ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
        
    Исключение
        Если Найти(ОписаниеОшибки(), "401") > 0 Тогда
            ОбновитьТокенДоступа();
            Возврат ПолучитьКонтакты(Поля, РазмерСтраницы);
        Иначе
            ВызватьИсключение "Ошибка получения контактов: " + ОписаниеОшибки();
        КонецЕсли;
    КонецПопытки;
КонецФункции

Функция СоздатьКонтакт(ДанныеКонтакта) Экспорт
    Попытка
        AccessToken = ПолучитьAccessToken();
        
        Запрос = Новый HTTPЗапрос;
        Запрос.Метод = "POST";
        Запрос.Адрес = "https://people.googleapis.com/v1/people:createContact";
        Запрос.Заголовки.Вставить("Authorization", "Bearer " + AccessToken);
        Запрос.Заголовки.Вставить("Content-Type", "application/json");
        
        ПисательJSON = Новый ЗаписьJSON;
        ПисательJSON.УстановитьСтроку();
        ЗаписатьJSON(ПисательJSON, ДанныеКонтакта);
        Тело = ПисательJSON.Закрыть();
        
        Запрос.УстановитьТелоИзСтроки(Тело);
        
        Соединение = Новый HTTPСоединение("people.googleapis.com", 443, , , 30, Новый ЗащищенноеСоединениеOpenSSL());
        Ответ = Соединение.Отправить(Запрос);
        
        Если Ответ.КодСостояния <> 200 Тогда
            ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
        КонецЕсли;
        
        Возврат ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
        
    Исключение
        ВызватьИсключение "Ошибка создания контакта: " + ОписаниеОшибки();
    КонецПопытки;
КонецФункции

Функция ОбновитьКонтакт(ResourceName, ОбновленныеДанные, ПоляОбновления) Экспорт
    Попытка
        AccessToken = ПолучитьAccessToken();
        
        Запрос = Новый HTTPЗапрос;
        Запрос.Метод = "PATCH";
        Запрос.Адрес = "https://people.googleapis.com/v1/" + ResourceName;
        Запрос.Заголовки.Вставить("Authorization", "Bearer " + AccessToken);
        Запрос.Заголовки.Вставить("Content-Type", "application/json");
        Запрос.ПараметрыЗапроса.Вставить("updatePersonFields", ПоляОбновления);
        
        ПисательJSON = Новый ЗаписьJSON;
        ПисательJSON.УстановитьСтроку();
        ЗаписатьJSON(ПисательJSON, ОбновленныеДанные);
        Тело = ПисательJSON.Закрыть();
        
        Запрос.УстановитьТелоИзСтроки(Тело);
        
        Соединение = Новый HTTPСоединение("people.googleapis.com", 443, , , 30, Новый ЗащищенноеСоединениеOpenSSL());
        Ответ = Соединение.Отправить(Запрос);
        
        Если Ответ.КодСостояния <> 200 Тогда
            ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
        КонецЕсли;
        
        Возврат ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
        
    Исключение
        ВызватьИсключение "Ошибка обновления контакта: " + ОписаниеОшибки();
    КонецПопытки;
КонецФункции

Функция УдалитьКонтакт(ResourceName) Экспорт
    Попытка
        AccessToken = ПолучитьAccessToken();
        
        Запрос = Новый HTTPЗапрос;
        Запрос.Метод = "DELETE";
        Запрос.Адрес = "https://people.googleapis.com/v1/" + ResourceName;
        Запрос.Заголовки.Вставить("Authorization", "Bearer " + AccessToken);
        
        Соединение = Новый HTTPСоединение("people.googleapis.com", 443, , , 30, Новый ЗащищенноеСоединениеOpenSSL());
        Ответ = Соединение.Отправить(Запрос);
        
        Если Ответ.КодСостояния <> 200 Тогда
            ВызватьИсключение ОбработатьОшибкуHTTP(Ответ);
        КонецЕсли;
        
        Возврат Истина;
        
    Исключение
        ВызватьИсключение "Ошибка удаления контакта: " + ОписаниеОшибки();
    КонецПопытки;
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

Функция СтрСоединитьПараметры(Параметры, Разделитель)
    Результат = "";
    Для Каждого Пар Из Параметры Цикл
        Если Результат <> "" Тогда
            Результат = Результат + Разделитель;
        КонецЕсли;
        Результат = Результат + Пар.Ключ + "=" + КодироватьСтроку(Пар.Значение, СпособКодированияСтроки.КодировкаURL);
    КонецЦикла;
    Возврат Результат;
КонецФункции

Функция ОбработатьОшибкуHTTP(Ответ)
    Если Ответ = Неопределено Тогда
        Возврат "Неизвестная ошибка";
    КонецЕсли;
    
    Попытка
        Данные = ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
        Если Данные.error.Свойство("message") Тогда
            Возврат Данные.error.message;
        ИначеЕсли Данные.error.Свойство("error_description") Тогда
            Возврат Данные.error.error_description;
        Иначе
            Возврат Ответ.ПолучитьТелоКакСтроку();
        КонецЕсли;
    Исключение
        Возврат "HTTP ошибка: " + Ответ.КодСостояния;
    КонецПопытки;
КонецФункции

//Функция ПрочитатьJSON(СтрокаJSON)
//    ЧтениеJSON = Новый ЧтениеJSON;
//    ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
//    Возврат ЧтениеJSON.Прочитать();
//КонецФункции

#КонецОбласти

#Область Примеры          



#Область OAuth_Интерфейс


Процедура ПодтвердитьКод(Элемент) Экспорт
    Форма = Элемент.Родитель;
    Код = Форма.Элементы.ПолеКода.Значение;
    
    Если ПустаяСтрока(Код) Тогда
        Сообщить("Введите код авторизации!");
        Возврат;
    КонецЕсли;
    
    Попытка
        Токен = ОбменятьКодНаТокен(Код);
        Форма.Закрыть();
        Сообщить("Авторизация успешно выполнена!");
    Исключение
        Сообщить("Ошибка: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область Примеры

Процедура ПримерПолнойИнтеграции() Экспорт
    Попытка
		//// Инициализация
		//Если Не Справочники.НастройкиИнтеграцииGoogle.НайтиПоНаименованию("Основные").Существует() Тогда
		//    Настройки = Новый Структура;
		//    Настройки.Вставить("КлиентID", "ваш_client_id");
		//    Настройки.Вставить("СекретКлиента", "ваш_client_secret");
		//    СохранитьНастройки(Настройки);
		//КонецЕсли;
		//
		//// Получение URL авторизации
		//URL = ПолучитьURLАвторизации();
		//
		//// Создание и отображение формы
		//Форма = ПолучитьФормуАвторизации();
		//Форма.Элементы.ПолеHTML.Документ = ПолучитьHTMLСтраницуАвторизации(URL);
		//Форма.ОткрытьМодально();
        
  		// Работа с контактами
        Контакты = ПолучитьКонтакты();
        Для Каждого Контакт Из Контакты.connections Цикл
            Сообщить(Контакт.names[0].displayName);
        КонецЦикла;
        
        // Создание контакта
        НовыйКонтакт = Новый Структура;
        НовыйКонтакт.Вставить("names", Новый Массив(
            Новый Структура("displayName", "Иван Иванов")
        ));
        НовыйКонтакт.Вставить("emailAddresses", Новый Массив(
            Новый Структура("value", "ivan@example.com")
        ));
        Результат = СоздатьКонтакт(НовыйКонтакт);
        Сообщить("Создан контакт: " + Результат.resourceName);
        
    Исключение
        Сообщить("Ошибка: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры


#КонецОбласти

#КонецОбласти